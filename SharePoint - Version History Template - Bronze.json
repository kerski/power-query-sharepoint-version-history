{
    "name": "SharePoint - Version History Template - Bronze",
    "description": "Pulls history data for SharePoint lists",
    "version": "1.0",
    "culture": "en-US",
    "modifiedTime": "2023-05-07T04:05:42.1182059+00:00",
    "ppdf:outputFileFormat": "Csv",
    "pbi:mashup": {
        "fastCombine": true,
        "allowNativeQueries": false,
        "queriesMetadata": {
            "SharePointURL": {
                "queryId": "06411f73-c72b-4176-b946-50db5b44ac90",
                "queryName": "SharePointURL",
                "queryGroupId": "d3805948-59cd-4c88-92ce-ec15d5115d33"
            },
            "ID Filter": {
                "queryId": "96902e97-4ebc-493e-9c3f-db1810679dda",
                "queryName": "ID Filter",
                "queryGroupId": "d3805948-59cd-4c88-92ce-ec15d5115d33"
            },
            "fnGetFields": {
                "queryId": "3bb6fb16-e23c-4e6f-ade0-93d6b2de4116",
                "queryName": "fnGetFields",
                "queryGroupId": "3fc1f7ff-adf1-4a1f-aec0-9a6e4847e854"
            },
            "Fields - IDs Only": {
                "queryId": "a91d1dad-03b7-4e92-b539-78ded30d7736",
                "queryName": "Fields - IDs Only",
                "queryGroupId": "56955d79-f6e3-4129-a46b-70af34ea08c7"
            },
            "fnGetSharePointData": {
                "queryId": "2d1a44f4-c2d1-42e3-846d-293240dff89b",
                "queryName": "fnGetSharePointData",
                "queryGroupId": "3fc1f7ff-adf1-4a1f-aec0-9a6e4847e854"
            },
            "Fields - For Versions": {
                "queryId": "e0daeed3-2327-44b1-bba1-0a3f758f1a7b",
                "queryName": "Fields - For Versions",
                "queryGroupId": "56955d79-f6e3-4129-a46b-70af34ea08c7"
            },
            "fnGetSharePointDataVersionsWithDateRange": {
                "queryId": "9fe6d6a9-fb9d-444e-91b6-b83747a18180",
                "queryName": "fnGetSharePointDataVersionsWithDateRange",
                "queryGroupId": "3fc1f7ff-adf1-4a1f-aec0-9a6e4847e854"
            },
            "List IDs": {
                "queryId": "9d47b7b2-c08a-46cc-82a2-2f387f810c7e",
                "queryName": "List IDs",
                "queryGroupId": "cb405803-7962-49d5-91a6-d15b5edcebd5"
            },
            "Version History Results": {
                "queryId": "f1e998e4-159a-4cce-9aa6-ca8fe5e6acf6",
                "queryName": "Version History Results",
                "queryGroupId": "cb405803-7962-49d5-91a6-d15b5edcebd5",
                "loadEnabled": true
            },
            "RangeStart-Proxy": {
                "queryId": "b67076df-5f80-4186-a7c7-ea8abca9d569",
                "queryName": "RangeStart-Proxy"
            },
            "RangeEnd-Proxy": {
                "queryId": "ff93a007-c9a2-4ddd-a44b-c4a0f026acd2",
                "queryName": "RangeEnd-Proxy"
            }
        },
        "document": "section Section1;\r\nshared SharePointURL = \"|SHAREPOINT_URL|\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared #\"ID Filter\" = \"ID lt 20\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared fnGetFields = let\r\n    Source = (ListName as text) =>\r\n    let\r\n    _X = (ListName) =>\r\n    let\r\n    // Define internal function\r\n    _GetJsonFromSharePoint = (url) =>\r\n    let\r\n    //Set Options and odata/json response\r\n    Options = [RelativePath = url, Headers = [Accept = \"application/json;odata=verbose\"]],\r\n    RawData = Web.Contents(\"|SHAREPOINT_URL|\", Options),\r\n    Json = Json.Document(RawData)\r\nin\r\n    Json,\r\n    // Define Next Link internal function\r\n    _GetNextLink = (jsonResults) =>\r\n    let\r\n    #\"Converted to Table\" = Record.ToTable(jsonResults),\r\n    #\"Expanded Value\" = Table.ExpandRecordColumn(\r\n    #\"Converted to Table\",\r\n    \"Value\",\r\n    {\"__next\"},\r\n    {\"Value.__next\"}\r\n    ),\r\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Value\", {\"Name\"})\r\nin\r\n    Table.FirstValue(#\"Removed Columns\"),\r\n    //With the internal functions defined, get the data\r\n    Json = _GetJsonFromSharePoint(\r\n    \"_api/lists/GetByTitle('\"\r\n    & ListName\r\n    & \"')/fields?$select=Title,Description,InternalName,SchemaXml,TypeAsString,Group,FromBaseType\"\r\n    ),\r\n    // Convert to List\r\n    Records = Json[d][results],\r\n    #\"Converted to Table\" = Table.FromList(\r\n    Records,\r\n    Splitter.SplitByNothing(),\r\n    null,\r\n    null,\r\n    ExtraValues.Error\r\n    ),\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(\r\n    #\"Converted to Table\",\r\n    \"Column1\",\r\n    {\r\n    \"Description\",\r\n    \"InternalName\",\r\n    \"SchemaXml\",\r\n    \"Title\",\r\n    \"TypeAsString\",\r\n    \"Group\",\r\n    \"FromBaseType\"\r\n    },\r\n    {\r\n    \"Description\",\r\n    \"InternalName\",\r\n    \"SchemaXml\",\r\n    \"Title\",\r\n    \"TypeAsString\",\r\n    \"Group\",\r\n    \"FromBaseType\"\r\n    }\r\n    ),\r\n    #\"Removed Other Columns\" = Table.SelectColumns(\r\n    #\"Expanded Column1\",\r\n    {\r\n    \"Description\",\r\n    \"InternalName\",\r\n    \"SchemaXml\",\r\n    \"Title\",\r\n    \"TypeAsString\",\r\n    \"Group\",\r\n    \"FromBaseType\"\r\n    }\r\n    ),\r\n    #\"Reordered Columns\" = Table.ReorderColumns(\r\n    #\"Removed Other Columns\",\r\n    {\"Title\", \"Description\", \"InternalName\", \"SchemaXml\", \"TypeAsString\"}\r\n    ),\r\n    #\"Parsed XML\" = Table.TransformColumns(#\"Reordered Columns\", {{\"SchemaXml\", Xml.Tables}}),\r\n    // Filter out columns that don't make part of the custom list or will be difficult to query\r\n    #\"Filtered Rows1\" = Table.SelectRows(\r\n    #\"Parsed XML\",\r\n    each (\r\n    (\r\n    [FromBaseType]\r\n    = false or [InternalName]\r\n    = \"Author\" or [InternalName]\r\n    = \"Created\" or [InternalName]\r\n    = \"Editor\" or [InternalName]\r\n    = \"Modified\" or [InternalName]\r\n    = \"Title\" or [InternalName]\r\n    = \"ID\" or [InternalName]\r\n    = \"_UIVersionString\"\r\n    )\r\n    )\r\n    and [InternalName]\r\n    <> \"_CommentFlags\" and [InternalName]\r\n    <> \"_CommentCount\"\r\n    ),\r\n    // Get Lookup column values\r\n    #\"Expanded SchemaXml\" = Table.ExpandTableColumn(\r\n    #\"Filtered Rows1\",\r\n    \"SchemaXml\",\r\n    {\"Attribute:ShowField\"},\r\n    {\"SchemaXml.Attribute:ShowField\"}\r\n    ),\r\n    #\"Renamed Columns\" = Table.RenameColumns(\r\n    #\"Expanded SchemaXml\",\r\n    {{\"SchemaXml.Attribute:ShowField\", \"Lookup Field\"}}\r\n    ),\r\n    // Prepare column to represent the select parameter for an Odata query\r\n    #\"Add Select Parameter\" = Table.AddColumn(\r\n    #\"Renamed Columns\",\r\n    \"Select Parameter\",\r\n    each\r\n    if [TypeAsString] = \"Lookup\" or [TypeAsString] = \"LookupMulti\" then\r\n    [InternalName] & \"/\" & [Lookup Field]\r\n    else if [TypeAsString] = \"User\" then\r\n    [InternalName] & \"/EMail,\" & [InternalName] & \"/Title\"\r\n    else\r\n    [InternalName]\r\n    ),\r\n    // Prepare column to represent the expand parameter for lookup columns in an Odata query\r\n    #\"Added Custom\" = Table.AddColumn(\r\n    #\"Add Select Parameter\",\r\n    \"Expand Parameter\",\r\n    each\r\n    if [TypeAsString]\r\n    = \"Lookup\" or [TypeAsString]\r\n    = \"LookupMulti\" or [TypeAsString]\r\n    = \"User\"\r\n    then\r\n    [InternalName]\r\n    else\r\n    null\r\n    ),\r\n    AddedListName = Table.AddColumn(#\"Added Custom\", \"List Name\", each ListName),\r\n    ExpansionInternalName = Table.AddColumn(AddedListName,\"Expansion Internal Name\", each [InternalName]),\r\n    Results = Table.ReplaceValue(ExpansionInternalName, \"_\", \"_x005f_\", Replacer.ReplaceText, {\"Expansion Internal Name\"})\r\nin\r\n    Results\r\nin\r\n    _X(ListName),\r\n    documentation = [\r\n    Documentation.Name = \"fnGetFields \",\r\n    Documentation.Description = \"Returns curated list of fields for the SharePoint list provided.\",\r\n    Documentation.LongDescription\r\n    = \"This function accepts a list name and will retrieve a curated list of columns from the SharePoint site.  All custom columns from the SharePoint site are retrieved, along with the ID, Created, Created By, Modified, and Modified By fields. The additional columns that appear after calling this function are used to building the SharePoint REST API query so you donâ€™t have to.\",\r\n    Documentation.Category = \" SharePoint \",\r\n    Documentation.Source = \"https://github.com/kerski/power-query-sharepoint-faster-easier\",\r\n    Documentation.Version = \"1\",\r\n    Documentation.Author = \" John Kerski \",\r\n    Documentation.Examples = {\r\n    [Description = \"  \", Code = \"fnGetFields( \"\"List Name\"\") \", Result = \" #table \"]\r\n    }\r\n    ],\r\n    Custom = Value.ReplaceType(Source, Value.ReplaceMetadata(Value.Type(Source), documentation))\r\nin\r\n    Custom;\r\nshared #\"Fields - IDs Only\" = let\r\n    Source = fnGetFields(\"|LIST_NAME|\"),\r\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Title] = \"ID\"))\r\nin\r\n    #\"Filtered Rows\";\r\nshared fnGetSharePointData = let\r\n    func = (Fields as table, FilterQuery as text) =>\r\n    let\r\n    _X = (Fields as table, Source as any, NextAPIQuery as text) =>\r\n    let\r\n    // Define internal function\r\n    _GetJsonFromSharePoint = (url) =>\r\n    let\r\n    //Set Options and odata/json response\r\n    Options = [RelativePath = url, Headers = [Accept = \"application/json;odata=verbose\"]],\r\n    RawData = Web.Contents(\"|SHAREPOINT_URL|\", Options),\r\n    Json = Json.Document(RawData)\r\nin\r\n    Json,\r\n    // Define Next Link internal function\r\n    _GetNextLink = (jsonResults) =>\r\n    let\r\n    #\"Converted to Table\" = Record.ToTable(jsonResults),\r\n    #\"Expanded Value\" = Table.ExpandRecordColumn(\r\n    #\"Converted to Table\",\r\n    \"Value\",\r\n    {\"__next\"},\r\n    {\"Value.__next\"}\r\n    ),\r\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Value\", {\"Name\"})\r\nin\r\n    Table.FirstValue(#\"Removed Columns\"),\r\n    // Convert Table to Query String is NextAPIQuery is not supplied\r\n    QueryString =\r\n    if NextAPIQuery <> null and NextAPIQuery <> \"\" then\r\n    NextAPIQuery\r\n    else\r\n    let\r\n    #\"Grouped Rows\" = Table.Group(\r\n    Fields,\r\n    {},\r\n    {\r\n    {\"$Select\", each Text.Combine([Select Parameter], \",\"), type text},\r\n    {\"$Expand\", each Text.Combine([Expand Parameter], \",\"), type nullable text},\r\n    {\"List Name\", each List.Min([List Name]), type text}\r\n    }\r\n    ),\r\n    #\"Added Custom\" = Table.AddColumn(\r\n    #\"Grouped Rows\",\r\n    \"Query String\",\r\n    each \"/_api/lists/GetByTitle('\"\r\n    & [List Name]\r\n    & \"')/items?$select=ID,\"\r\n    & [#\"$Select\"]\r\n    & \"&$expand=\"\r\n    & [#\"$Expand\"]\r\n    & \"&$top=5000\"\r\n    ),\r\n    QueryString = #\"Added Custom\"{0}[Query String],\r\n    // Handle if Filter Query was provided\r\n    QueryString2 =\r\n    if FilterQuery <> null and FilterQuery <> \"\" then\r\n    QueryString & \"&$filter=\" & FilterQuery\r\n    else\r\n    QueryString\r\nin\r\n    QueryString2,\r\n    //With the internal functions defined, get the data\r\n    Json = _GetJsonFromSharePoint(QueryString),\r\n    // Convert to List\r\n    Records = Json[d][results],\r\n    // Combine results\r\n    NewRecords = if Source is null then Records else List.Combine({Source, Records}),\r\n    // Get next link, if exists\r\n    NextLink = _GetNextLink(Json),\r\n    // Build Base URL for recursive call\r\n    BaseUrlLength = Text.Length(\"|SHAREPOINT_URL|\"),\r\n    // Call Recursively if Next Link exists\r\n    Result =\r\n    if NextLink is null then\r\n    let\r\n    //Get ls of internal and exteral names\r\n    LstInternalNames = Table.ToList(Table.SelectColumns(Fields, {\"Expansion Internal Name\"})),\r\n    LstDisplayNames = Table.ToList(Table.SelectColumns(Fields, {\"Title\"})),\r\n    // Convert list of records to table\r\n    #\"Converted to Table\" = Table.FromList(\r\n    NewRecords,\r\n    Splitter.SplitByNothing(),\r\n    null,\r\n    null,\r\n    ExtraValues.Error\r\n    ),\r\n    // Expand based on fields supplied.\r\n    #\"Expanded Column1\" = Table.ExpandRecordColumn(\r\n    #\"Converted to Table\",\r\n    \"Column1\",\r\n    LstInternalNames,\r\n    LstDisplayNames\r\n    )\r\nin\r\n    #\"Expanded Column1\"\r\n    else\r\n    @_X(Fields, NewRecords, Text.Range(NextLink, BaseUrlLength))\r\nin\r\n    Result\r\nin\r\n    _X(Fields, null, \"\"),\r\n    documentation = [\r\n    Documentation.Name = \" fnGetSharePointData \",\r\n    Documentation.Description\r\n    = \" Returns data from a SharePoint list when supplied a table of Fields produced by fnGetFields function.\",\r\n    Documentation.LongDescription\r\n    = \" Returns data from a SharePoint list when supplied a table of Fields produced by fnGetFields function.  To filter the data please provide a correctly formatted OData query in the FilterQuery parameter.\",\r\n    Documentation.Category = \" SharePoint \",\r\n    Documentation.Source = \"https://github.com/kerski/power-query-sharepoint-faster-easier\",\r\n    Documentation.Version = \"1\",\r\n    Documentation.Author = \" John Kerski \",\r\n    Documentation.Examples = {\r\n    [\r\n    Description = \"  \",\r\n    Code        = \" fnGetSharePointData( #table, \"\"Title eq 'Example'\"\") \",\r\n    Result      = \" {#record, #record, #record} \"\r\n    ]\r\n    }\r\n    ],\r\n    Custom = Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))\r\nin\r\n    Custom;\r\nshared #\"Fields - For Versions\" = let\r\n    Source = fnGetFields(\"|LIST_NAME|\")\r\nin\r\n    Source;\r\nshared fnGetSharePointDataVersionsWithDateRange = let\n    func = (Fields as table, FilterQuery as text, ListItemId as number, StartDate as datetime, EndDate as datetime) =>\n    let\n    _X = (Fields as table, Source as any, NextAPIQuery as text, ListItemId as number, StartDate as datetime, EndDate as datetime) =>\n    let\n    // Define internal function\n    _GetJsonFromSharePoint = (url) =>\n    let\n    //Set Options and odata/json response\n    Options = [RelativePath = url, Headers = [Accept = \"application/json;odata=verbose\"]],\n    RawData = Web.Contents(\"|SHAREPOINT_URL|\", Options)\nin\n    RawData,\n    // Define Next Link internal function\n    _GetNextLink = (jsonResults) =>\n    let\n    #\"Converted to Table\" = Record.ToTable(jsonResults),\n    #\"Expanded Value\" = Table.ExpandRecordColumn(\n    #\"Converted to Table\",\n    \"Value\",\n    {\"__next\"},\n    {\"Value.__next\"}\n    ),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Expanded Value\", {\"Name\"})\nin\n    Table.FirstValue(#\"Removed Columns\"),\n    // Convert Table to Query String is NextAPIQuery is not supplied\n    QueryString =\n    if NextAPIQuery <> null and NextAPIQuery <> \"\" then\n    NextAPIQuery\n    else\n    let\n    #\"Grouped Rows\" = Table.Group(\n    Fields,\n    {},\n    {\n    {\"$Select\", each Text.Combine([Select Parameter], \",\"), type text},\n    {\"$Expand\", each Text.Combine([Expand Parameter], \",\"), type nullable text},\n    {\"List Name\", each List.Min([List Name]), type text}\n    }\n    ),\n    #\"Added Custom\" = Table.AddColumn(\n    #\"Grouped Rows\",\n    \"Query String\",\n    each \"/_api/lists/GetByTitle('\"\n    & [List Name]\n    & \"')/items(\" & Number.ToText(ListItemId) &\")/versions?$select=\"\n    & [#\"$Select\"]\n    & \"&$expand=\"\n    & [#\"$Expand\"]\n    & \"&$top=5000\"\n    ),\n    QueryString = #\"Added Custom\"{0}[Query String] & \"&$filter=Modified ge datetime'\" & DateTime.ToText(StartDate,[Format=\"yyyy-MM-ddTHH:mm:ss.fffZ\"])  & \"' and Modified le datetime'\" & DateTime.ToText(EndDate,[Format=\"yyyy-MM-ddTHH:mm:ss.fffZ\"]) & \"'\",\n    // Handle if Filter Query was provided\n    QueryString2 =\n    if FilterQuery <> null and Text.Trim(Text.Clean(FilterQuery)) <> \"\" then\n    QueryString & \" and \" & FilterQuery\n    else\n    QueryString\nin\n    QueryString2,\n    //With the internal functions defined, get the data\n    Json = _GetJsonFromSharePoint(QueryString),\n    // Convert to List\n    Records = Json.Document(Json)[d][results],\n    // Combine results\n    NewRecords = if Source is null then {Text.FromBinary(Json)} else List.Combine(Source, {Text.FromBinary(Json)}),\n    // Get next link, if exists\n    NextLink = _GetNextLink(Json.Document(Json)),\n    // Build Base URL for recursive call\n    BaseUrlLength = Text.Length(\"|SHAREPOINT_URL|\"),\n    // Call Recursively if Next Link exists\n    Result =\n    if NextLink is null then NewRecords\n    else\n    @_X(Fields, NewRecords, Text.Range(NextLink, BaseUrlLength), ListItemId)\nin\n    Result\nin\n    _X(Fields, null, \"\", ListItemId, StartDate as datetime, EndDate as datetime),\n    documentation = [\n    Documentation.Name = \" fnGetSharePointDataVersionsWithDateRange\",\n    Documentation.Description\n    = \"Returns versions of a SharePoint list item when supplied a List Item ID, a table of Fields produced by fnGetFields function., and a date range\",\n    Documentation.LongDescription\n    = \"Returns versions of a SharePoint list item when supplied a List Item ID, a table of Fields produced by fnGetFields function., and a date range\",\n    Documentation.Category = \" SharePoint \",\n    Documentation.Source = \"https://github.com/kerski/power-query-sharepoint-version-history\",\n    Documentation.Version = \"1\",\n    Documentation.Author = \" John Kerski \",\n    Documentation.Examples = {\n    [\n    Description = \"  \",\n    Code        = \" fnGetSharePointData( #table, \"\"Title eq 'Example'\"\", 2, #datetime(2023,1,1,0,0,0), #datetime(2024,1,1,0,0,0)) \",\n    Result      = \" {#record, #record, #record} \"\n    ]\n    }\n    ],\n    Custom = Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))\nin\n    Custom;\r\nshared #\"List IDs\" = let\r\n    Source = fnGetSharePointData(#\"Fields - IDs Only\", #\"ID Filter\")\r\nin\r\n    Source;\r\nshared #\"Version History Results\" = let\r\n    Source = #\"List IDs\",\r\n    #\"Get Version History\" = Table.AddColumn(Source, \"Version Information - JSON\", each fnGetSharePointDataVersionsWithDateRange(#\"Fields - For Versions\", \"\", [ID], #\"RangeStart-Proxy\", #\"RangeEnd-Proxy\")),\r\n    #\"Expanded Version Information - JSON\" = Table.ExpandListColumn(#\"Get Version History\", \"Version Information - JSON\"),\r\n    #\"Parsed JSON\" = Table.TransformColumns(#\"Expanded Version Information - JSON\", {{\"Version Information - JSON\", each Json.Document(_), type any}}),\r\n    #\"Parse d\" = Table.ExpandRecordColumn(#\"Parsed JSON\", \"Version Information - JSON\", {\"d\"}, {\"d\"}),\r\n    #\"Expanded d\" = Table.ExpandRecordColumn(#\"Parse d\", \"d\", {\"results\"}, {\"results\"}),\r\n    #\"Expanded results\" = Table.ExpandListColumn(#\"Expanded d\", \"results\"),\r\n    // Take version information and put back into JSON so it can be used by another flow (has to be text)\r\n    #\"Added Version JSON\" = Table.AddColumn(#\"Expanded results\", \"Version JSON\", each Text.FromBinary(Json.FromValue([results]))),\r\n    #\"Expanded results to get Version Number and Modified Date\" = Table.ExpandRecordColumn(#\"Added Version JSON\", \"results\", {\"Modified\", \"OData__x005f_UIVersionString\"}, {\"Modified\", \"OData__x005f_UIVersionString\"}),\r\n    #\"Convert Version Number and Modified Date to appropriate types\" = Table.TransformColumnTypes(#\"Expanded results to get Version Number and Modified Date\", {{\"Modified\", type datetime}, {\"OData__x005f_UIVersionString\", Int64.Type}, {\"ID\", Int64.Type}, {\"Version JSON\", type text}}),\r\n    #\"Renamed columns\" = Table.RenameColumns(#\"Convert Version Number and Modified Date to appropriate types\", {{\"OData__x005f_UIVersionString\", \"Version Number\"}}),\r\n    #\"Sort Modified by descending\" = Table.Sort(#\"Renamed columns\", {{\"Modified\", Order.Descending}}),\r\n    #\"Remove Empties\" = Table.SelectRows(#\"Sort Modified by descending\", each [Version Number] <> null and [Version Number] <> \"\"),\r\n    #\"Added custom\" = Table.AddColumn(#\"Remove Empties\", \"Version JSON Length\", each Text.Length([Version JSON])),\r\n    #\"Transform columns\" = Table.TransformColumnTypes(#\"Added custom\", {{\"Version JSON Length\", type text}}),\r\n    #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"Version JSON Length\", null}})\r\nin\r\n    #\"Replace errors\";\r\nshared #\"RangeStart-Proxy\" = let\r\n  #\"RangeStart-Proxy\" = try RangeStart otherwise #datetime(0001, 1, 1, 0, 0, 0) meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type datetime],\r\n  #\"Convert to table\" = Table.FromValue(#\"RangeStart-Proxy\"),\r\n  #\"Drill down\" = #\"Convert to table\"{0}[Value]\r\nin\r\n  #\"Drill down\";\r\nshared #\"RangeEnd-Proxy\" = let\r\n  #\"RangeEnd-Proxy\" = try RangeEnd otherwise #datetime(9999, 12, 31, 0, 0, 0) meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type datetime],\r\n  #\"Convert to table\" = Table.FromValue(#\"RangeEnd-Proxy\"),\r\n  #\"Drill down\" = #\"Convert to table\"{0}[Value]\r\nin\r\n  #\"Drill down\";\r\n",
        "connectionOverrides": [
            {
                "path": "|SHAREPOINT_URL|",
                "kind": "Web",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"Web\",\"path\":\"|SHAREPOINT_URL|\"}",
                "audience": null
            },
            {
                "path": "PowerPlatformDataflows",
                "kind": "PowerPlatformDataflows",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"PowerPlatformDataflows\",\"path\":\"PowerPlatformDataflows\"}",
                "audience": null
            }
        ]
    },
    "annotations": [
        {
            "name": "pbi:QueryGroups",
            "value": "[{\"id\":\"d3805948-59cd-4c88-92ce-ec15d5115d33\",\"name\":\"Parameters\",\"description\":\"\",\"parentId\":null,\"order\":0},{\"id\":\"3fc1f7ff-adf1-4a1f-aec0-9a6e4847e854\",\"name\":\"Functions\",\"description\":\"\",\"parentId\":null,\"order\":0},{\"id\":\"56955d79-f6e3-4129-a46b-70af34ea08c7\",\"name\":\"Fields\",\"description\":\"Contains table with Fields for SharePoint lists.\",\"parentId\":null,\"order\":2},{\"id\":\"cb405803-7962-49d5-91a6-d15b5edcebd5\",\"name\":\"Version History\",\"description\":\"\",\"parentId\":null,\"order\":1}]"
        }
    ],
    "entities": [
        {
            "$type": "LocalEntity",
            "name": "Version History Results",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "Version%20History%20Results.csv"
            },
            "attributes": [
                {
                    "name": "ID",
                    "dataType": "int64"
                },
                {
                    "name": "Modified",
                    "dataType": "dateTime"
                },
                {
                    "name": "Version Number",
                    "dataType": "int64"
                },
                {
                    "name": "Version JSON",
                    "dataType": "string"
                },
                {
                    "name": "Version JSON Length",
                    "dataType": "string"
                }
            ],
            "partitions": [
            ]
        }
    ]
}